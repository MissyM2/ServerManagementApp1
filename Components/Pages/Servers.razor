@page "/servers"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
<h3>Servers</h3>
<br/>
<br/>

<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                <div
                    class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase) ? "border-primary" : "")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary"
                                @onclick="@(() => { DisplayServersByCity(city); })">
                            @city
                        </button>
                    </div>
                </div>

            </div>
        }
    </div>
</div>
<br/>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search servers" @onchange="HandleServerFilterChanged"/>
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleServerSearch">Search
    </button>
</div>
@serverFilter
<ul>
    @foreach (var server in servers)
    {
        <li>
            @server.Name in @server.City is
            <span style="color:@(server.IsOnline ? "green" : "red")">
            @(server.IsOnline ? "online" : "offline")
        </span>

            <a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
            &nbsp;
            <EditForm
                Model="server"
                FormName="@($"form-server-{server.ServerId}")"
                OnValidSubmit="@(() => { DeleteServer(server.ServerId); })">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </li>
    }
</ul>
<p>
    <a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>



@code {
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");
    private readonly List<string> cities = CitiesRepository.GetCities();
    private string selectedCity = "Toronto";
    private string serverFilter = "";


    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo("/servers");
        }
    }

    private void DisplayServersByCity(string cityName)
    {
        selectedCity = cityName;
        servers = ServersRepository.GetServersByCity(selectedCity);
    }

    private void HandleServerFilterChanged(ChangeEventArgs args)
    {
        serverFilter = args.Value?.ToString() ?? string.Empty;
    }

    private void HandleServerSearch()
    {
        servers = ServersRepository.SearchServers(serverFilter);
        selectedCity = string.Empty;
    }


}